Select query for a specific columns
SELECT column, another_column, …
FROM mytable;

Select query for all columns
SELECT * 
FROM mytable;

Operator	        Condition	                                            SQL Example
=, !=, < <=, >, >=	Standard numerical operators	                        col_name != 4
BETWEEN … AND …	    Number is within range of two values (inclusive)	    col_name BETWEEN 1.5 AND 10.5
NOT BETWEEN … AND …	Number is not within range of two values (inclusive)    col_name NOT BETWEEN 1 AND 10
IN (…)	            Number exists in a list	col_name                        IN (2, 4, 6)
NOT IN (…)	        Number does not exist in a list	col_name                NOT IN (1, 3, 5)


Operator	    Condition	                                                                                            Example
=	            Case sensitive exact string comparison (notice the single equals)	                                    col_name = "abc"
!= or <>	    Case sensitive exact string inequality comparison	                                                    col_name != "abcd"
LIKE	        Case insensitive exact string comparison	                                                            col_name LIKE "ABC"
NOT LIKE	    Case insensitive exact string inequality comparison	                                                    col_name NOT LIKE "ABCD"
%	            Used anywhere in a string to match a sequence of zero or more characters (only with LIKE or NOT LIKE)	col_name LIKE "%AT%" (matches "AT", "ATTIC", "CAT" or even "BATS")
_	            Used anywhere in a string to match a single character (only with LIKE or NOT LIKE)	                    col_name LIKE "AN_" (matches "AND", but not "AN")
IN (…)	        String exists in a list	                                                                                col_name IN ("A", "B", "C")
NOT IN (…)	    String does not exist in a list	                                                                        col_name NOT IN ("D", "E", "F")

Select query with unique results
SELECT DISTINCT column, another_column, …
FROM mytable
WHERE condition(s);

Select query with ordered results
SELECT column, another_column, …
FROM mytable
WHERE condition(s)
ORDER BY column ASC/DESC;


Another clause which is commonly used with the ORDER BY clause are the LIMIT and OFFSET clauses, which are a useful optimization to indicate to the database the subset of the results you care about.
The LIMIT will reduce the number of rows to return, and the optional OFFSET will specify where to begin counting the number rows from.
Select query with limited rows
SELECT column, another_column, …
FROM mytable
WHERE condition(s)
ORDER BY column ASC/DESC
LIMIT num_limit OFFSET num_offset;

ex:
SELECT Title, Year FROM movies
ORDER BY Title 
LIMIT 5 OFFSET 5;

ex:
SELECT * FROM north_american_cities
WHERE Country = "United States"
ORDER BY Population DESC
LIMIT 2 OFFSET 2

SELECT query
SELECT column, another_column, …
FROM mytable
WHERE condition(s)
ORDER BY column ASC/DESC
LIMIT num_limit OFFSET num_offset;

Select query with INNER JOIN on multiple tables
SELECT column, another_table_column, …
FROM mytable
(INNER) JOIN another_table 
    ON mytable.id = another_table.id
WHERE condition(s)
ORDER BY column, … ASC/DESC
LIMIT num_limit OFFSET num_offset;

ex:
SELECT Rating, Title 
from Boxoffice
INNER JOIN Movies 
    ON Boxoffice.Movie_id = Movies.Id
ORDER BY Rating DESC 

for INNER JOIN: the resulting table only contains data that belongs in both of the tables
If the two tables have asymmetric data, which can easily happen when data is entered in different 
stages, then we would have to use a LEFT JOIN, RIGHT JOIN or FULL JOIN instead to ensure that the 
data you need is not left out of the results.

When joining table A to table B, a LEFT JOIN simply includes rows from A regardless of whether a 
matching row is found in B. The RIGHT JOIN is the same, but reversed, keeping rows in B regardless 
of whether a match is found in A. Finally, a FULL JOIN simply means that rows from both tables are kept,
regardless of whether a matching row exists in the other table.

SELECT column, another_column, …
FROM mytable
INNER/LEFT/RIGHT/FULL JOIN another_table 
    ON mytable.id = another_table.matching_id
WHERE condition(s)
ORDER BY column, … ASC/DESC
LIMIT num_limit OFFSET num_offset;

ex:
SELECT DISTINCT Role, Building_name
FROM Buildings
LEFT JOIN Employees
    ON Buildings.Building_name = Employees.Building

Select query with constraints on NULL values
SELECT column, another_column, …
FROM mytable
WHERE column IS/IS NOT NULL
AND/OR another_condition
AND/OR …;

it's better to give an alias for selected columns with expressions 
Example query with expressions
SELECT particle_speed / 2.0 AS half_particle_speed
FROM physics_data
WHERE ABS(particle_position) * 10.0 > 500;

Example query with both column and table name aliases
SELECT column AS better_column_name, …
FROM a_long_widgets_table_name AS mywidgets
INNER JOIN widget_sales
  ON mywidgets.id = widget_sales.widget_id;

https://sqlbolt.com/lesson/select_queries_with_expressions
ex:
SELECT (Domestic_sales + International_sales)/1000000 as total_sales, Title
FROM Boxoffice
LEFT JOIN Movies
ON Boxoffice.Movie_id = Movies.Id

SELECT Rating*10 as Rating_percent, Title
FROM Boxoffice
LEFT JOIN Movies
ON Boxoffice.Movie_id = Movies.Id

SELECT Rating, Year, Title
FROM Boxoffice
LEFT JOIN Movies
ON Boxoffice.Movie_id = Movies.Id
WHERE Year % 2 = 0

https://sqlbolt.com/lesson/select_queries_with_aggregates

Select query with aggregate functions over all rows
SELECT AGG_FUNC(column_or_expression) AS aggregate_description, …
FROM mytable
WHERE constraint_expression;

Function	            Description
COUNT(*), COUNT(column)	A common function used to counts the number of rows in the group if no column name is specified. Otherwise, count the number of rows in the group with non-NULL values in the specified column.
MIN(column)	            Finds the smallest numerical value in the specified column for all rows in the group.
MAX(column)	            Finds the largest numerical value in the specified column for all rows in the group.
AVG(column)	            Finds the average numerical value in the specified column for all rows in the group.
SUM(column)	            Finds the sum of all numerical values in the specified column for the rows in the group.


https://sqlbolt.com/lesson/select_queries_with_aggregates
ex:
SELECT DISTINCT role, AVG(Years_employed) as average_years 
FROM employees
GROUP BY Role;

ex:
SELECT Building, role, SUM(Years_employed) as average_years 
FROM employees
GROUP BY Building;

Select query with HAVING constraint
SELECT group_by_column, AGG_FUNC(column_expression) AS aggregate_result_alias, …
FROM mytable
WHERE condition
GROUP BY column
HAVING group_condition;

https://sqlbolt.com/lesson/select_queries_with_aggregates_pt_2
HAVING is the same meaning as WHERE for GROUP conditions

SELECT Role, SUM(Years_employed)
FROM employees
WHERE Role = "Engineer"
GROUP by Role

Complete SELECT query
SELECT DISTINCT column, AGG_FUNC(column_or_expression), …
FROM mytable
    JOIN another_table
      ON mytable.column = another_table.column
    WHERE constraint_expression
    GROUP BY column
    HAVING constraint_expression
    ORDER BY column ASC/DESC
    LIMIT count OFFSET COUNT;

    Query order of execution
1. FROM and JOINs
The FROM clause, and subsequent JOINs are first executed to determine the total working 
set of data that is being queried. This includes subqueries in this clause, and can cause 
temporary tables to be created under the hood containing all the columns and rows of the 
tables being joined.

2. WHERE
Once we have the total working set of data, the first-pass WHERE constraints are applied to 
the individual rows, and rows that do not satisfy the constraint are discarded. Each of the 
constraints can only access columns directly from the tables requested in the FROM clause. 
Aliases in the SELECT part of the query are not accessible in most databases since they may 
include expressions dependent on parts of the query that have not yet executed.

3. GROUP BY
The remaining rows after the WHERE constraints are applied are then grouped based on common 
values in the column specified in the GROUP BY clause. As a result of the grouping, there 
will only be as many rows as there are unique values in that column. Implicitly, this means 
that you should only need to use this when you have aggregate functions in your query.

4. HAVING
If the query has a GROUP BY clause, then the constraints in the HAVING clause are then 
applied to the grouped rows, discard the grouped rows that don't satisfy the constraint. 
Like the WHERE clause, aliases are also not accessible from this step in most databases.

5. SELECT
Any expressions in the SELECT part of the query are finally computed.

6. DISTINCT
Of the remaining rows, rows with duplicate values in the column marked as DISTINCT will be
 discarded.

7. ORDER BY
If an order is specified by the ORDER BY clause, the rows are then sorted by the specified 
data in either ascending or descending order. Since all the expressions in the SELECT part 
of the query have been computed, you can reference aliases in this clause.

8. LIMIT / OFFSET
Finally, the rows that fall outside the range specified by the LIMIT and OFFSET are discarded,
 leaving the final set of rows to be returned from the query.

SELECT Director, COUNT(*) as num_of_movies_directed
FROM Movies
GROUP BY Director;

SELECT Director, SUM(International_sales + Domestic_sales) as total_sales
FROM Movies
    JOIN Boxoffice
    ON Movies.Id = Boxoffice.Movie_id
    GROUP BY Director

Example Insert statement with expressions
INSERT INTO boxoffice
(movie_id, rating, sales_in_millions)
VALUES (1, 9.9, 283742034 / 1000000);

https://sqlbolt.com/lesson/inserting_rows

INSERT INTO mytable
(column, another_column, …)
VALUES (value_or_expr, another_value_or_expr, …),
      (value_or_expr_2, another_value_or_expr_2, …),
      …;
    
Update statement with values
UPDATE mytable
SET column = value_or_expr, 
    other_column = another_value_or_expr, 
    …
WHERE condition;

Delete statement with condition
DELETE FROM mytable
WHERE condition;
If you decide to leave out the WHERE constraint, then all rows are removed, 
which is a quick and easy way to clear out a table completely (if intentional).

Taking extra care
Like the UPDATE statement from last lesson, it's recommended that you run the constraint 
in a  SELECT query first to ensure that you are removing the right rows. Without a proper 
backup or test database, it is downright easy to irrevocably remove data, so always read 
your DELETE statements twice and execute once.

Movies table schema
CREATE TABLE movies (
    id INTEGER PRIMARY KEY,
    title TEXT,
    director TEXT,
    year INTEGER, 
    length_minutes INTEGER,
    Version FLOAT
);

Altering table to add new column(s)
ALTER TABLE mytable
ADD column DataType OptionalTableConstraint 
    DEFAULT default_value;

Altering table to remove column(s)
ALTER TABLE mytable
DROP column_to_be_deleted;

Altering table name
ALTER TABLE mytable
RENAME TO new_table_name;

SELECT *
FROM employees
WHERE salary > 
   (SELECT AVG(revenue_generated)
    FROM employees AS dept_employees
    WHERE dept_employees.department = employees.department);

Select query with subquery constraint
SELECT *, …
FROM mytable
WHERE column
    IN/NOT IN (SELECT another_column
               FROM another_table);

Your database schema is a description of the organization of your database into 
tables and columns.

Here are a few of the most common datatypes:

BOOLEAN
INT
FLOAT (stores "floating point" numbers)
VARCHAR(255) (essentialy a string with a length limit of 255 chars)
TEXT (a string of unlimited length)
DATE
DATETIME
TIME
BLOB (non-textual, binary data; e.g., an image)

**Inner join** produces only the set of records that match in both Table A and 
Table B.

Full outer join produces the set of all records in Table A and Table B, with matching records from both sides where available. If there is no match, the missing side will contain null.

Left outer join produces a complete set of records from Table A, with the matching records (where available) in Table B. If there is no match, the right side will contain null.

SELECT * FROM TableA
LEFT OUTER JOIN TableB
ON TableA.name = TableB.name
WHERE TableB.id IS null

To produce the set of records only in Table A, but not in Table B, we perform the same left outer join, then exclude the records we don't want from the right side via a where clause.

SELECT * FROM TableA
FULL OUTER JOIN TableB
ON TableA.name = TableB.name
WHERE TableA.id IS null
OR TableB.id IS null

To produce the set of records unique to Table A and Table B, we perform the same full outer join, then **exclude the records we don't want from both sides via a where clause**.

SELECT * FROM TableA
CROSS JOIN TableB
This joins "everything to everything", resulting in 4 x 4 = 16 rows, far more than we had in the original sets. If you do the math, you can see why this is a very dangerous join to run against large tables.

SELECT
  bands.*
FROM
  bands
JOIN (
  SELECT
    albums.*
  FROM
    albums
  WHERE
    album.type = "POP"
  GROUP BY
    album.band_id
  HAVING
    COUNT(*) > 3
  ) AS pop_group_albums ON bands.id = pop_group_albums.band_id
WHERE
  band.leader_id IN (
    SELECT
      musicians.id
    FROM
      musicians
    WHERE
      musicians.birth_yr > 1940
  )

mass if the rental rate is 0.99
economic if the rental rate is 1.99
luxury if the rental rate is 4.99
SELECT
 SUM (
 CASE
 WHEN rental_rate = 0.99 THEN
 1
 ELSE
 0
 END
 ) AS "Mass",
 SUM (
 CASE
 WHEN rental_rate = 2.99 THEN
 1
 ELSE
 0
 END
 ) AS "Economic",
 SUM (
 CASE
 WHEN rental_rate = 4.99 THEN
 1
 ELSE
 0
 END
 ) AS "Luxury"
FROM
 film;

CASE expression
WHEN value_1 THEN
 result_1
WHEN value_2 THEN
 result_2 
[WHEN ...]
ELSE
 result_n
END;

SELECT
 SUM (
 CASE rental_rate
 WHEN 0.99 THEN
 1
 ELSE
 0
 END
 ) AS "Mass",
 SUM (
 CASE rental_rate
 WHEN 2.99 THEN
 1
 ELSE
 0
 END
 ) AS "Economic",
 SUM (
 CASE rental_rate
 WHEN 4.99 THEN
 1
 ELSE
 0
 END
 ) AS "Luxury"
FROM
 film;

The COALESCE function accepts an unlimited number of arguments. It returns the first argument that is not null. If all arguments are null, the COALESCE function will return null.

SELECT
 COALESCE (NULL, 2 , 1); => 2


SELECT
 product,
 (price - COALESCE(discount,0)) AS net_price
FROM
 items;

SELECT
 product,
 (
 price - CASE
 WHEN discount IS NULL THEN
 0
 ELSE
 discount
 END
 ) AS net_price
FROM
 items;


https://open.appacademy.io/learn/full-stack-in-person/full-stack-in-person-sql/postgresql-setup
cat learning_sql_example_postgres.sql | psql bank
takes the output of the first command (cat learning_sql_example_postgres.sql, which just outputs the contents of the file) and uses it as the input of the command on the right (psql bank, which runs SQL commands).