Select query for a specific columns
SELECT column, another_column, …
FROM mytable;

Select query for all columns
SELECT * 
FROM mytable;

Operator	        Condition	                                            SQL Example
=, !=, < <=, >, >=	Standard numerical operators	                        col_name != 4
BETWEEN … AND …	    Number is within range of two values (inclusive)	    col_name BETWEEN 1.5 AND 10.5
NOT BETWEEN … AND …	Number is not within range of two values (inclusive)    col_name NOT BETWEEN 1 AND 10
IN (…)	            Number exists in a list	col_name                        IN (2, 4, 6)
NOT IN (…)	        Number does not exist in a list	col_name                NOT IN (1, 3, 5)


Operator	    Condition	                                                                                            Example
=	            Case sensitive exact string comparison (notice the single equals)	                                    col_name = "abc"
!= or <>	    Case sensitive exact string inequality comparison	                                                    col_name != "abcd"
LIKE	        Case insensitive exact string comparison	                                                            col_name LIKE "ABC"
NOT LIKE	    Case insensitive exact string inequality comparison	                                                    col_name NOT LIKE "ABCD"
%	            Used anywhere in a string to match a sequence of zero or more characters (only with LIKE or NOT LIKE)	col_name LIKE "%AT%" (matches "AT", "ATTIC", "CAT" or even "BATS")
_	            Used anywhere in a string to match a single character (only with LIKE or NOT LIKE)	                    col_name LIKE "AN_" (matches "AND", but not "AN")
IN (…)	        String exists in a list	                                                                                col_name IN ("A", "B", "C")
NOT IN (…)	    String does not exist in a list	                                                                        col_name NOT IN ("D", "E", "F")

Select query with unique results
SELECT DISTINCT column, another_column, …
FROM mytable
WHERE condition(s);

Select query with ordered results
SELECT column, another_column, …
FROM mytable
WHERE condition(s)
ORDER BY column ASC/DESC;


Another clause which is commonly used with the ORDER BY clause are the LIMIT and OFFSET clauses, which are a useful optimization to indicate to the database the subset of the results you care about.
The LIMIT will reduce the number of rows to return, and the optional OFFSET will specify where to begin counting the number rows from.
Select query with limited rows
SELECT column, another_column, …
FROM mytable
WHERE condition(s)
ORDER BY column ASC/DESC
LIMIT num_limit OFFSET num_offset;

ex:
SELECT Title, Year FROM movies
ORDER BY Title 
LIMIT 5 OFFSET 5;

ex:
SELECT * FROM north_american_cities
WHERE Country = "United States"
ORDER BY Population DESC
LIMIT 2 OFFSET 2

SELECT query
SELECT column, another_column, …
FROM mytable
WHERE condition(s)
ORDER BY column ASC/DESC
LIMIT num_limit OFFSET num_offset;

Select query with INNER JOIN on multiple tables
SELECT column, another_table_column, …
FROM mytable
(INNER) JOIN another_table 
    ON mytable.id = another_table.id
WHERE condition(s)
ORDER BY column, … ASC/DESC
LIMIT num_limit OFFSET num_offset;

ex:
SELECT Rating, Title 
from Boxoffice
INNER JOIN Movies 
    ON Boxoffice.Movie_id = Movies.Id
ORDER BY Rating DESC 

for INNER JOIN: the resulting table only contains data that belongs in both of the tables
If the two tables have asymmetric data, which can easily happen when data is entered in different 
stages, then we would have to use a LEFT JOIN, RIGHT JOIN or FULL JOIN instead to ensure that the 
data you need is not left out of the results.

When joining table A to table B, a LEFT JOIN simply includes rows from A regardless of whether a 
matching row is found in B. The RIGHT JOIN is the same, but reversed, keeping rows in B regardless 
of whether a match is found in A. Finally, a FULL JOIN simply means that rows from both tables are kept,
regardless of whether a matching row exists in the other table.

SELECT column, another_column, …
FROM mytable
INNER/LEFT/RIGHT/FULL JOIN another_table 
    ON mytable.id = another_table.matching_id
WHERE condition(s)
ORDER BY column, … ASC/DESC
LIMIT num_limit OFFSET num_offset;

ex:
SELECT DISTINCT Role, Building_name
FROM Buildings
LEFT JOIN Employees
    ON Buildings.Building_name = Employees.Building

Select query with constraints on NULL values
SELECT column, another_column, …
FROM mytable
WHERE column IS/IS NOT NULL
AND/OR another_condition
AND/OR …;

it's better to give an alias for selected columns with expressions 
Example query with expressions
SELECT particle_speed / 2.0 AS half_particle_speed
FROM physics_data
WHERE ABS(particle_position) * 10.0 > 500;

Example query with both column and table name aliases
SELECT column AS better_column_name, …
FROM a_long_widgets_table_name AS mywidgets
INNER JOIN widget_sales
  ON mywidgets.id = widget_sales.widget_id;

https://sqlbolt.com/lesson/select_queries_with_expressions
ex:
SELECT (Domestic_sales + International_sales)/1000000 as total_sales, Title
FROM Boxoffice
LEFT JOIN Movies
ON Boxoffice.Movie_id = Movies.Id

SELECT Rating*10 as Rating_percent, Title
FROM Boxoffice
LEFT JOIN Movies
ON Boxoffice.Movie_id = Movies.Id

SELECT Rating, Year, Title
FROM Boxoffice
LEFT JOIN Movies
ON Boxoffice.Movie_id = Movies.Id
WHERE Year % 2 = 0

https://sqlbolt.com/lesson/select_queries_with_aggregates

Select query with aggregate functions over all rows
SELECT AGG_FUNC(column_or_expression) AS aggregate_description, …
FROM mytable
WHERE constraint_expression;

Function	            Description
COUNT(*), COUNT(column)	A common function used to counts the number of rows in the group if no column name is specified. Otherwise, count the number of rows in the group with non-NULL values in the specified column.
MIN(column)	            Finds the smallest numerical value in the specified column for all rows in the group.
MAX(column)	            Finds the largest numerical value in the specified column for all rows in the group.
AVG(column)	            Finds the average numerical value in the specified column for all rows in the group.
SUM(column)	            Finds the sum of all numerical values in the specified column for the rows in the group.
